@@ -36,6 +36,9 @@
     cfg.StrOpt('integration_bridge',
                default='br-int',
                help='Name of Integration Bridge'),
+    cfg.StrOpt('vlan_interface_ha',
+               default='vmnic0',
+               help='Physical ethernet adapter name for vlan networking for HA'),
 ]
 
 CONF.register_opts(vmwareapi_vif_opts, 'vmware')
@@ -54,11 +57,26 @@ def _get_associated_vswitch_for_interface(session, interface, cluster=None):
     return vswitch_associated
 
 
+def _get_associated_vswitch_for_interfaces(session, interfaces, cluster=None):
+    # Check if the physical network adapter exists on the host.
+    if not network_util.check_if_vlan_interfaces_exists(session,
+                                        interfaces, cluster):
+        raise exception.NetworkAdapterNotFound(adapter=interfaces)
+    # Get the vSwitch associated with the Physical Adapter
+    vswitch_associated = network_util.get_vswitch_for_vlan_interfaces(
+                                    session, interfaces, cluster)
+    if not vswitch_associated:
+        raise exception.SwitchNotFoundForNetworkAdapter(adapter=pnic)
+    return vswitch_associated
+
+
 def ensure_vlan_bridge(session, vif, cluster=None, create_vlan=True):
     """Create a vlan and bridge unless they already exist."""
     vlan_num = vif['network'].get_meta('vlan')
     bridge = vif['network']['bridge']
     vlan_interface = CONF.vmware.vlan_interface
+    vlan_interface_ha = CONF.vmware.vlan_interface_ha
+    vlan_interfaces = [vlan_interface, vlan_interface_ha]
 
     network_ref = network_util.get_network_with_the_name(session, bridge,
                                                          cluster)
@@ -69,8 +87,8 @@ def ensure_vlan_bridge(session, vif, cluster=None, create_vlan=True):
         # Create a port group on the vSwitch associated with the
         # vlan_interface corresponding physical network adapter on the ESX
         # host.
-        vswitch_associated = _get_associated_vswitch_for_interface(session,
-                                 vlan_interface, cluster)
+        vswitch_associated = _get_associated_vswitch_for_interfaces(session,
+                                 vlan_interfaces, cluster)
         network_util.create_port_group(session, bridge,
                                        vswitch_associated,
                                        vlan_num if create_vlan else 0,
@@ -80,8 +98,8 @@ def ensure_vlan_bridge(session, vif, cluster=None, create_vlan=True):
                                                              cluster)
     elif create_vlan:
         # Get the vSwitch associated with the Physical Adapter
-        vswitch_associated = _get_associated_vswitch_for_interface(session,
-                                 vlan_interface, cluster)
+        vswitch_associated = _get_associated_vswitch_for_interfaces(session,
+                                 vlan_interfaces, cluster)
         # Get the vlan id and vswitch corresponding to the port group
         _get_pg_info = network_util.get_vlanid_and_vswitch_for_portgroup
         pg_vlanid, pg_vswitch = _get_pg_info(session, bridge, cluster)